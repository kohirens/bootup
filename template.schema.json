{
    "$comment": "see here for clarity: https://json-schema.org/understanding-json-schema/index.html",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://github.com/kohirens/tmpltoapp/blob/main/template.schema.json",
    "title": "Template Placeholder Manifest",
    "description": "Provide list a placeholder variables names for a template",
    "version": "2.1.0",
    "type": "object",
    "required": [ "version", "placeholders" ],
    "properties": {
        "version": {
            "description": "The semantic version of the template.json schema used",
            "type": "string",
            "pattern": "\\d\\.\\d(\\.\\d)?"
        },
        "placeholders": {
            "description": "A map where the keys are the placeholder names and the values are strings to present as a question to ask for the value in a CLI prompt",
            "type": "object"
        },
        "excludes": {
            "description": "A list of files and directories to exclude from template processing, and to copy as-is",
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
        },
        "skip": {
            "description": "A list of files and directories to completely skip, will not be processed or copied",
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
        },
        "validation": {
            "description": "Validation for placeholder values.",
            "type": "array",
            "minItems": 1,
            "items": {
                "type": "object",
                "$ref": "#/$defs/validator"
            }
        },
        "substitute": {
            "description": "Specify the name of the substitute directory. Files in this directory are copied to the root of the template right before pressing output.",
            "type": "string"
        }
    },
    "$defs": {
        "validator": {
            "$anchor": "validator",
            "type": "object",
            "required": ["fields", "rule"],
            "properties": {
                "fields": {
                    "type": "array",
                    "minItems": 1
                },
                "rule": {
                    "type": "string",
                    "enum": ["alphaNumeric", "regExp"]
                },
                "expression": {
                    "type": "string",
                    "format": "regex"
                }
            },
            "dependentRequired": {
                "regExp": [ "expression" ]
            }
        }
    }
}
