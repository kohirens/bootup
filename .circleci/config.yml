version: 2.1

orbs:
    vr: kohirens/version-release@3.1.0

parameters:
    ctx_ci_cd:
        default: kohirens-automation
        description: automation context
        type: string
    ctx_dockerhub:
        default: kohirens-automation-dockerhub
        description: docker credentials context
        type: string
    ssh_finger:
        description: SSH fingerprint.
        type: string
        default: "SHA256:CgtYkgOsmwp8z79MwpBeXTs4sI1ba3S9RUCFjQ1xR3g"
    triggered_flow:
        default: "workflow-selector"
        description: Workflow to be executed.
        type: string

default-env-vars: &default-env-vars
    DH_IMG_REPO: "kohirens/tmplpress"
    DH_CONTAINER: "tmplpress-node-1"

filter-semantic-tag: &filter-semantic-tag
    tags:
        only: /^v?\d+\.\d+\.\d+$/
    branches:
        ignore: /.*/

jobs:
  co:
    docker:
      - image: cimg/go:1.21
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}
      - run:
          name: Install Dependencies
          command: go mod tidy
      - save_cache:
          key: go-mod-v1-{{ checksum "go.mod" }}
          paths:
            - "/go/pkg/mod"
      - persist_to_workspace:
          root: .
          paths: [ . ]

  run-test:
    docker:
      - image: cimg/go:1.21
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
            keys:
                - go-mod-v1-{{ checksum "go.mod" }}
      - run:
          name: "Unit Test"
          command: |
              go test -v ./...
      - run:
          name: "Validate Answers/Template Schemas"
          command: |
              curl -L -o "yajsv" https://github.com/neilpa/yajsv/releases/download/v1.4.1/yajsv.linux.amd64
              chmod +x ./yajsv
              ./yajsv -s answers.schema.json testdata/answers-01.json
              ./yajsv -s template.schema.json testdata/template-01.json
              ./yajsv -s template.schema.json testdata/template-1.2.json

  publish-image:
    docker:
      - image: kohirens/circleci-go:0.4.0
        auth:
          username: ${DH_USER}
          password: ${DH_PASS}
    environment:
      <<: *default-env-vars
    steps:
      - setup_remote_docker:
          version: "20.10.14"
      - checkout
      - run:
          name: "Build and Publish Docker Release Image"
          command: |
            echo "Publishing tag '<< pipeline.git.tag >>'"
            export BUILD_VER="<< pipeline.git.tag >>"
            if [ -z "${BUILD_VER}" ]; then
              echo "cannot publish a Docker image, release-tag is empty"
              exit 1
            fi
            echo "${DH_PASS}" | docker login -u "${DH_USER}" --password-stdin
            export DH_IMAGE="${DH_IMG_REPO}:${BUILD_VER}"
            docker build -t "${DH_IMAGE}" --rm -f .docker/Dockerfile .
            docker push "${DH_IMAGE}"
            docker rmi "${DH_IMAGE}"

  publish-execs:
    docker:
        - image: kohirens/circleci-go:0.4.0
          auth:
            username: ${DH_USER}
            password: ${DH_PASS}
    steps:
        - checkout
        - run:
            name: "Build"
            command: |
              echo "Publishing tag '<< pipeline.git.tag >>'"
              export BUILD_VER="<< pipeline.git.tag >>"
              if [ -z "${BUILD_VER}" ]; then
                echo "cannot publish executables, release-tag file not found"
                exit 1
              fi
              go install
              export PATH="${PATH}:/root/go/bin"
              go generate
              chmod +x ./build-gh-artifacts.sh
              ./build-gh-artifacts.sh

workflows:
    quality-control:
        jobs:
            - co:
                filters: { branches: { ignore: /main|auto-update-changelog/ } }
            - run-test:
                requires: [ co ]

    workflow-selector:
        when:
            and:
                - equal: ["workflow-selector", << pipeline.parameters.triggered_flow >>]
                - equal: [ main, << pipeline.git.branch >> ]
        jobs:
            - vr/workflow-selector:
                  context: << pipeline.parameters.ctx_ci_cd >>
                  ssh_finger: << pipeline.parameters.ssh_finger >>

    publish-changelog:
        when:
            and:
                - equal: ["publish-changelog", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vr/publish-changelog:
                  context: << pipeline.parameters.ctx_ci_cd >>
                  ssh_finger: << pipeline.parameters.ssh_finger >>

    publish-release-tag:
        when:
            and:
                - equal: ["publish-release-tag", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vr/tag-and-release:
                  context: << pipeline.parameters.ctx_ci_cd >>

    on-tag-release:
        jobs:
            - publish-image:
                  context:
                      - << pipeline.parameters.ctx_ci_cd >>
                      - << pipeline.parameters.ctx_dockerhub >>
                  filters:
                      <<: *filter-semantic-tag
            - publish-execs:
                  context: << pipeline.parameters.ctx_ci_cd >>
                  filters:
                      <<: *filter-semantic-tag
